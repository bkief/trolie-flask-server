from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivePower(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mw=None, pf=None):  # noqa: E501
        """ActivePower - a model defined in OpenAPI

        :param mw: The mw of this ActivePower.  # noqa: E501
        :type mw: float
        :param pf: The pf of this ActivePower.  # noqa: E501
        :type pf: float
        """
        self.openapi_types = {
            'mw': float,
            'pf': float
        }

        self.attribute_map = {
            'mw': 'mw',
            'pf': 'pf'
        }

        self._mw = mw
        self._pf = pf

    @classmethod
    def from_dict(cls, dikt) -> 'ActivePower':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The active-power of this ActivePower.  # noqa: E501
        :rtype: ActivePower
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mw(self) -> float:
        """Gets the mw of this ActivePower.


        :return: The mw of this ActivePower.
        :rtype: float
        """
        return self._mw

    @mw.setter
    def mw(self, mw: float):
        """Sets the mw of this ActivePower.


        :param mw: The mw of this ActivePower.
        :type mw: float
        """
        if mw is None:
            raise ValueError("Invalid value for `mw`, must not be `None`")  # noqa: E501
        if mw is not None and mw > 10000:  # noqa: E501
            raise ValueError("Invalid value for `mw`, must be a value less than or equal to `10000`")  # noqa: E501
        if mw is not None and mw < 1:  # noqa: E501
            raise ValueError("Invalid value for `mw`, must be a value greater than or equal to `1`")  # noqa: E501

        self._mw = mw

    @property
    def pf(self) -> float:
        """Gets the pf of this ActivePower.


        :return: The pf of this ActivePower.
        :rtype: float
        """
        return self._pf

    @pf.setter
    def pf(self, pf: float):
        """Sets the pf of this ActivePower.


        :param pf: The pf of this ActivePower.
        :type pf: float
        """
        if pf is not None and pf > 1:  # noqa: E501
            raise ValueError("Invalid value for `pf`, must be a value less than or equal to `1`")  # noqa: E501
        if pf is not None and pf < 0:  # noqa: E501
            raise ValueError("Invalid value for `pf`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pf = pf
