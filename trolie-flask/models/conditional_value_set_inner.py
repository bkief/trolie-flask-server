from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask.models.limit import Limit
from trolie-flask.models.limit_value_set_inner import LimitValueSetInner
from trolie-flask.models.network_component_name import NetworkComponentName
from trolie-flask import util

from trolie-flask.models.limit import Limit  # noqa: E501
from trolie-flask.models.limit_value_set_inner import LimitValueSetInner  # noqa: E501
from trolie-flask.models.network_component_name import NetworkComponentName  # noqa: E501

class ConditionalValueSetInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition=None, continuous_operating_limit=None, emergency_operating_limits=None):  # noqa: E501
        """ConditionalValueSetInner - a model defined in OpenAPI

        :param condition: The condition of this ConditionalValueSetInner.  # noqa: E501
        :type condition: NetworkComponentName
        :param continuous_operating_limit: The continuous_operating_limit of this ConditionalValueSetInner.  # noqa: E501
        :type continuous_operating_limit: Limit
        :param emergency_operating_limits: The emergency_operating_limits of this ConditionalValueSetInner.  # noqa: E501
        :type emergency_operating_limits: List[LimitValueSetInner]
        """
        self.openapi_types = {
            'condition': NetworkComponentName,
            'continuous_operating_limit': Limit,
            'emergency_operating_limits': List[LimitValueSetInner]
        }

        self.attribute_map = {
            'condition': 'condition',
            'continuous_operating_limit': 'continuous-operating-limit',
            'emergency_operating_limits': 'emergency-operating-limits'
        }

        self._condition = condition
        self._continuous_operating_limit = continuous_operating_limit
        self._emergency_operating_limits = emergency_operating_limits

    @classmethod
    def from_dict(cls, dikt) -> 'ConditionalValueSetInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The conditional_value_set_inner of this ConditionalValueSetInner.  # noqa: E501
        :rtype: ConditionalValueSetInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self) -> NetworkComponentName:
        """Gets the condition of this ConditionalValueSetInner.


        :return: The condition of this ConditionalValueSetInner.
        :rtype: NetworkComponentName
        """
        return self._condition

    @condition.setter
    def condition(self, condition: NetworkComponentName):
        """Sets the condition of this ConditionalValueSetInner.


        :param condition: The condition of this ConditionalValueSetInner.
        :type condition: NetworkComponentName
        """

        self._condition = condition

    @property
    def continuous_operating_limit(self) -> Limit:
        """Gets the continuous_operating_limit of this ConditionalValueSetInner.


        :return: The continuous_operating_limit of this ConditionalValueSetInner.
        :rtype: Limit
        """
        return self._continuous_operating_limit

    @continuous_operating_limit.setter
    def continuous_operating_limit(self, continuous_operating_limit: Limit):
        """Sets the continuous_operating_limit of this ConditionalValueSetInner.


        :param continuous_operating_limit: The continuous_operating_limit of this ConditionalValueSetInner.
        :type continuous_operating_limit: Limit
        """

        self._continuous_operating_limit = continuous_operating_limit

    @property
    def emergency_operating_limits(self) -> List[LimitValueSetInner]:
        """Gets the emergency_operating_limits of this ConditionalValueSetInner.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :return: The emergency_operating_limits of this ConditionalValueSetInner.
        :rtype: List[LimitValueSetInner]
        """
        return self._emergency_operating_limits

    @emergency_operating_limits.setter
    def emergency_operating_limits(self, emergency_operating_limits: List[LimitValueSetInner]):
        """Sets the emergency_operating_limits of this ConditionalValueSetInner.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :param emergency_operating_limits: The emergency_operating_limits of this ConditionalValueSetInner.
        :type emergency_operating_limits: List[LimitValueSetInner]
        """
        if emergency_operating_limits is not None and len(emergency_operating_limits) > 10:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be less than or equal to `10`")  # noqa: E501
        if emergency_operating_limits is not None and len(emergency_operating_limits) < 1:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._emergency_operating_limits = emergency_operating_limits
