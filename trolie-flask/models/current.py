from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask import util


class Current(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amps=None):  # noqa: E501
        """Current - a model defined in OpenAPI

        :param amps: The amps of this Current.  # noqa: E501
        :type amps: float
        """
        self.openapi_types = {
            'amps': float
        }

        self.attribute_map = {
            'amps': 'amps'
        }

        self._amps = amps

    @classmethod
    def from_dict(cls, dikt) -> 'Current':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The current of this Current.  # noqa: E501
        :rtype: Current
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amps(self) -> float:
        """Gets the amps of this Current.


        :return: The amps of this Current.
        :rtype: float
        """
        return self._amps

    @amps.setter
    def amps(self, amps: float):
        """Sets the amps of this Current.


        :param amps: The amps of this Current.
        :type amps: float
        """
        if amps is None:
            raise ValueError("Invalid value for `amps`, must not be `None`")  # noqa: E501
        if amps is not None and amps > 100000:  # noqa: E501
            raise ValueError("Invalid value for `amps`, must be a value less than or equal to `100000`")  # noqa: E501
        if amps is not None and amps < 1:  # noqa: E501
            raise ValueError("Invalid value for `amps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amps = amps
