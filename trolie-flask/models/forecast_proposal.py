from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_proposal_header import ForecastProposalHeader
from openapi_server.models.resource_forecast_proposal import ResourceForecastProposal
from openapi_server import util

from openapi_server.models.forecast_proposal_header import ForecastProposalHeader  # noqa: E501
from openapi_server.models.resource_forecast_proposal import ResourceForecastProposal  # noqa: E501

class ForecastProposal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, proposal_header=None, ratings=None):  # noqa: E501
        """ForecastProposal - a model defined in OpenAPI

        :param proposal_header: The proposal_header of this ForecastProposal.  # noqa: E501
        :type proposal_header: ForecastProposalHeader
        :param ratings: The ratings of this ForecastProposal.  # noqa: E501
        :type ratings: List[ResourceForecastProposal]
        """
        self.openapi_types = {
            'proposal_header': ForecastProposalHeader,
            'ratings': List[ResourceForecastProposal]
        }

        self.attribute_map = {
            'proposal_header': 'proposal-header',
            'ratings': 'ratings'
        }

        self._proposal_header = proposal_header
        self._ratings = ratings

    @classmethod
    def from_dict(cls, dikt) -> 'ForecastProposal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The forecast-proposal of this ForecastProposal.  # noqa: E501
        :rtype: ForecastProposal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def proposal_header(self) -> ForecastProposalHeader:
        """Gets the proposal_header of this ForecastProposal.


        :return: The proposal_header of this ForecastProposal.
        :rtype: ForecastProposalHeader
        """
        return self._proposal_header

    @proposal_header.setter
    def proposal_header(self, proposal_header: ForecastProposalHeader):
        """Sets the proposal_header of this ForecastProposal.


        :param proposal_header: The proposal_header of this ForecastProposal.
        :type proposal_header: ForecastProposalHeader
        """
        if proposal_header is None:
            raise ValueError("Invalid value for `proposal_header`, must not be `None`")  # noqa: E501

        self._proposal_header = proposal_header

    @property
    def ratings(self) -> List[ResourceForecastProposal]:
        """Gets the ratings of this ForecastProposal.

        Forecasted Ratings  # noqa: E501

        :return: The ratings of this ForecastProposal.
        :rtype: List[ResourceForecastProposal]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings: List[ResourceForecastProposal]):
        """Sets the ratings of this ForecastProposal.

        Forecasted Ratings  # noqa: E501

        :param ratings: The ratings of this ForecastProposal.
        :type ratings: List[ResourceForecastProposal]
        """
        if ratings is None:
            raise ValueError("Invalid value for `ratings`, must not be `None`")  # noqa: E501
        if ratings is not None and len(ratings) > 50000:
            raise ValueError("Invalid value for `ratings`, number of items must be less than or equal to `50000`")  # noqa: E501
        if ratings is not None and len(ratings) < 0:
            raise ValueError("Invalid value for `ratings`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._ratings = ratings
