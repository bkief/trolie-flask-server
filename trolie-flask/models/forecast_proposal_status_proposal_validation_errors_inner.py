from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
import re
from trolie-flask import util

import re  # noqa: E501

class ForecastProposalStatusProposalValidationErrorsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, resource_id=None):  # noqa: E501
        """ForecastProposalStatusProposalValidationErrorsInner - a model defined in OpenAPI

        :param message: The message of this ForecastProposalStatusProposalValidationErrorsInner.  # noqa: E501
        :type message: str
        :param resource_id: The resource_id of this ForecastProposalStatusProposalValidationErrorsInner.  # noqa: E501
        :type resource_id: str
        """
        self.openapi_types = {
            'message': str,
            'resource_id': str
        }

        self.attribute_map = {
            'message': 'message',
            'resource_id': 'resource-id'
        }

        self._message = message
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt) -> 'ForecastProposalStatusProposalValidationErrorsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The forecast_proposal_status_proposal_validation_errors_inner of this ForecastProposalStatusProposalValidationErrorsInner.  # noqa: E501
        :rtype: ForecastProposalStatusProposalValidationErrorsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """Gets the message of this ForecastProposalStatusProposalValidationErrorsInner.


        :return: The message of this ForecastProposalStatusProposalValidationErrorsInner.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this ForecastProposalStatusProposalValidationErrorsInner.


        :param message: The message of this ForecastProposalStatusProposalValidationErrorsInner.
        :type message: str
        """
        if message is not None and len(message) > 500:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `500`")  # noqa: E501
        if message is not None and not re.search(r'^(.){1,500}$', message):  # noqa: E501
            raise ValueError("Invalid value for `message`, must be a follow pattern or equal to `/^(.){1,500}$/`")  # noqa: E501

        self._message = message

    @property
    def resource_id(self) -> str:
        """Gets the resource_id of this ForecastProposalStatusProposalValidationErrorsInner.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :return: The resource_id of this ForecastProposalStatusProposalValidationErrorsInner.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: str):
        """Sets the resource_id of this ForecastProposalStatusProposalValidationErrorsInner.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :param resource_id: The resource_id of this ForecastProposalStatusProposalValidationErrorsInner.
        :type resource_id: str
        """
        if resource_id is not None and len(resource_id) > 250:
            raise ValueError("Invalid value for `resource_id`, length must be less than or equal to `250`")  # noqa: E501
        if resource_id is not None and not re.search(r'^(.){0,250}$', resource_id):  # noqa: E501
            raise ValueError("Invalid value for `resource_id`, must be a follow pattern or equal to `/^(.){0,250}$/`")  # noqa: E501

        self._resource_id = resource_id
