from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.data_provenance import DataProvenance
from openapi_server.models.emergency_durations_inner import EmergencyDurationsInner
from openapi_server.models.names import Names
from openapi_server import util

from openapi_server.models.data_provenance import DataProvenance  # noqa: E501
from openapi_server.models.emergency_durations_inner import EmergencyDurationsInner  # noqa: E501
from openapi_server.models.names import Names  # noqa: E501

class ForecastSnapshotHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_updated=None, begins=None, snapshot_provenance=None, power_system_resources=None, default_emergency_durations=None):  # noqa: E501
        """ForecastSnapshotHeader - a model defined in OpenAPI

        :param last_updated: The last_updated of this ForecastSnapshotHeader.  # noqa: E501
        :type last_updated: datetime
        :param begins: The begins of this ForecastSnapshotHeader.  # noqa: E501
        :type begins: datetime
        :param snapshot_provenance: The snapshot_provenance of this ForecastSnapshotHeader.  # noqa: E501
        :type snapshot_provenance: DataProvenance
        :param power_system_resources: The power_system_resources of this ForecastSnapshotHeader.  # noqa: E501
        :type power_system_resources: List[Names]
        :param default_emergency_durations: The default_emergency_durations of this ForecastSnapshotHeader.  # noqa: E501
        :type default_emergency_durations: List[EmergencyDurationsInner]
        """
        self.openapi_types = {
            'last_updated': datetime,
            'begins': datetime,
            'snapshot_provenance': DataProvenance,
            'power_system_resources': List[Names],
            'default_emergency_durations': List[EmergencyDurationsInner]
        }

        self.attribute_map = {
            'last_updated': 'last-updated',
            'begins': 'begins',
            'snapshot_provenance': 'snapshot-provenance',
            'power_system_resources': 'power-system-resources',
            'default_emergency_durations': 'default-emergency-durations'
        }

        self._last_updated = last_updated
        self._begins = begins
        self._snapshot_provenance = snapshot_provenance
        self._power_system_resources = power_system_resources
        self._default_emergency_durations = default_emergency_durations

    @classmethod
    def from_dict(cls, dikt) -> 'ForecastSnapshotHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The forecast-snapshot-header of this ForecastSnapshotHeader.  # noqa: E501
        :rtype: ForecastSnapshotHeader
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this ForecastSnapshotHeader.

        RFC 3339 date-time string with a maximum of 10 digits in the fractional seconds component, i.e., nanosecond precision.  # noqa: E501

        :return: The last_updated of this ForecastSnapshotHeader.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this ForecastSnapshotHeader.

        RFC 3339 date-time string with a maximum of 10 digits in the fractional seconds component, i.e., nanosecond precision.  # noqa: E501

        :param last_updated: The last_updated of this ForecastSnapshotHeader.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501
        if last_updated is not None and len(last_updated) > 35:
            raise ValueError("Invalid value for `last_updated`, length must be less than or equal to `35`")  # noqa: E501

        self._last_updated = last_updated

    @property
    def begins(self) -> datetime:
        """Gets the begins of this ForecastSnapshotHeader.

         RFC 3339 date-time string with *no fractional seconds component* that Nominates the operational window of this snapshot.   # noqa: E501

        :return: The begins of this ForecastSnapshotHeader.
        :rtype: datetime
        """
        return self._begins

    @begins.setter
    def begins(self, begins: datetime):
        """Sets the begins of this ForecastSnapshotHeader.

         RFC 3339 date-time string with *no fractional seconds component* that Nominates the operational window of this snapshot.   # noqa: E501

        :param begins: The begins of this ForecastSnapshotHeader.
        :type begins: datetime
        """
        if begins is None:
            raise ValueError("Invalid value for `begins`, must not be `None`")  # noqa: E501
        if begins is not None and len(begins) > 25:
            raise ValueError("Invalid value for `begins`, length must be less than or equal to `25`")  # noqa: E501

        self._begins = begins

    @property
    def snapshot_provenance(self) -> DataProvenance:
        """Gets the snapshot_provenance of this ForecastSnapshotHeader.


        :return: The snapshot_provenance of this ForecastSnapshotHeader.
        :rtype: DataProvenance
        """
        return self._snapshot_provenance

    @snapshot_provenance.setter
    def snapshot_provenance(self, snapshot_provenance: DataProvenance):
        """Sets the snapshot_provenance of this ForecastSnapshotHeader.


        :param snapshot_provenance: The snapshot_provenance of this ForecastSnapshotHeader.
        :type snapshot_provenance: DataProvenance
        """
        if snapshot_provenance is None:
            raise ValueError("Invalid value for `snapshot_provenance`, must not be `None`")  # noqa: E501

        self._snapshot_provenance = snapshot_provenance

    @property
    def power_system_resources(self) -> List[Names]:
        """Gets the power_system_resources of this ForecastSnapshotHeader.

        Collection of power system resource names  # noqa: E501

        :return: The power_system_resources of this ForecastSnapshotHeader.
        :rtype: List[Names]
        """
        return self._power_system_resources

    @power_system_resources.setter
    def power_system_resources(self, power_system_resources: List[Names]):
        """Sets the power_system_resources of this ForecastSnapshotHeader.

        Collection of power system resource names  # noqa: E501

        :param power_system_resources: The power_system_resources of this ForecastSnapshotHeader.
        :type power_system_resources: List[Names]
        """
        if power_system_resources is None:
            raise ValueError("Invalid value for `power_system_resources`, must not be `None`")  # noqa: E501
        if power_system_resources is not None and len(power_system_resources) > 50000:
            raise ValueError("Invalid value for `power_system_resources`, number of items must be less than or equal to `50000`")  # noqa: E501
        if power_system_resources is not None and len(power_system_resources) < 0:
            raise ValueError("Invalid value for `power_system_resources`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._power_system_resources = power_system_resources

    @property
    def default_emergency_durations(self) -> List[EmergencyDurationsInner]:
        """Gets the default_emergency_durations of this ForecastSnapshotHeader.

        Defines the durations in minutes used for emergency limits.  # noqa: E501

        :return: The default_emergency_durations of this ForecastSnapshotHeader.
        :rtype: List[EmergencyDurationsInner]
        """
        return self._default_emergency_durations

    @default_emergency_durations.setter
    def default_emergency_durations(self, default_emergency_durations: List[EmergencyDurationsInner]):
        """Sets the default_emergency_durations of this ForecastSnapshotHeader.

        Defines the durations in minutes used for emergency limits.  # noqa: E501

        :param default_emergency_durations: The default_emergency_durations of this ForecastSnapshotHeader.
        :type default_emergency_durations: List[EmergencyDurationsInner]
        """
        if default_emergency_durations is not None and len(default_emergency_durations) > 10:
            raise ValueError("Invalid value for `default_emergency_durations`, number of items must be less than or equal to `10`")  # noqa: E501
        if default_emergency_durations is not None and len(default_emergency_durations) < 1:
            raise ValueError("Invalid value for `default_emergency_durations`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._default_emergency_durations = default_emergency_durations
