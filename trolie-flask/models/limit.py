from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask.models.active_power import ActivePower
from trolie-flask.models.apparent_power import ApparentPower
from trolie-flask.models.current import Current
from trolie-flask.models.overvoltage_threshold import OvervoltageThreshold
from trolie-flask.models.overvoltage_threshold_pu import OvervoltageThresholdPu
from trolie-flask.models.reactive_power import ReactivePower
from trolie-flask.models.undervoltage_threshold import UndervoltageThreshold
from trolie-flask.models.undervoltage_threshold_pu import UndervoltageThresholdPu
from trolie-flask import util

from trolie-flask.models.active_power import ActivePower  # noqa: E501
from trolie-flask.models.apparent_power import ApparentPower  # noqa: E501
from trolie-flask.models.current import Current  # noqa: E501
from trolie-flask.models.overvoltage_threshold import OvervoltageThreshold  # noqa: E501
from trolie-flask.models.overvoltage_threshold_pu import OvervoltageThresholdPu  # noqa: E501
from trolie-flask.models.reactive_power import ReactivePower  # noqa: E501
from trolie-flask.models.undervoltage_threshold import UndervoltageThreshold  # noqa: E501
from trolie-flask.models.undervoltage_threshold_pu import UndervoltageThresholdPu  # noqa: E501

class Limit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mw=None, pf=None, mva=None, amps=None, mvar=None, voltage_pu_max=None, base_k_v=None, k_v_max=None, voltage_pu_min=None, k_v_min=None):  # noqa: E501
        """Limit - a model defined in OpenAPI

        :param mw: The mw of this Limit.  # noqa: E501
        :type mw: float
        :param pf: The pf of this Limit.  # noqa: E501
        :type pf: float
        :param mva: The mva of this Limit.  # noqa: E501
        :type mva: float
        :param amps: The amps of this Limit.  # noqa: E501
        :type amps: float
        :param mvar: The mvar of this Limit.  # noqa: E501
        :type mvar: float
        :param voltage_pu_max: The voltage_pu_max of this Limit.  # noqa: E501
        :type voltage_pu_max: float
        :param base_k_v: The base_k_v of this Limit.  # noqa: E501
        :type base_k_v: float
        :param k_v_max: The k_v_max of this Limit.  # noqa: E501
        :type k_v_max: float
        :param voltage_pu_min: The voltage_pu_min of this Limit.  # noqa: E501
        :type voltage_pu_min: float
        :param k_v_min: The k_v_min of this Limit.  # noqa: E501
        :type k_v_min: float
        """
        self.openapi_types = {
            'mw': float,
            'pf': float,
            'mva': float,
            'amps': float,
            'mvar': float,
            'voltage_pu_max': float,
            'base_k_v': float,
            'k_v_max': float,
            'voltage_pu_min': float,
            'k_v_min': float
        }

        self.attribute_map = {
            'mw': 'mw',
            'pf': 'pf',
            'mva': 'mva',
            'amps': 'amps',
            'mvar': 'mvar',
            'voltage_pu_max': 'voltage-pu-max',
            'base_k_v': 'base-kV',
            'k_v_max': 'kV-max',
            'voltage_pu_min': 'voltage-pu-min',
            'k_v_min': 'kV-min'
        }

        self._mw = mw
        self._pf = pf
        self._mva = mva
        self._amps = amps
        self._mvar = mvar
        self._voltage_pu_max = voltage_pu_max
        self._base_k_v = base_k_v
        self._k_v_max = k_v_max
        self._voltage_pu_min = voltage_pu_min
        self._k_v_min = k_v_min

    @classmethod
    def from_dict(cls, dikt) -> 'Limit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The limit of this Limit.  # noqa: E501
        :rtype: Limit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mw(self) -> float:
        """Gets the mw of this Limit.


        :return: The mw of this Limit.
        :rtype: float
        """
        return self._mw

    @mw.setter
    def mw(self, mw: float):
        """Sets the mw of this Limit.


        :param mw: The mw of this Limit.
        :type mw: float
        """
        if mw is None:
            raise ValueError("Invalid value for `mw`, must not be `None`")  # noqa: E501
        if mw is not None and mw > 10000:  # noqa: E501
            raise ValueError("Invalid value for `mw`, must be a value less than or equal to `10000`")  # noqa: E501
        if mw is not None and mw < 1:  # noqa: E501
            raise ValueError("Invalid value for `mw`, must be a value greater than or equal to `1`")  # noqa: E501

        self._mw = mw

    @property
    def pf(self) -> float:
        """Gets the pf of this Limit.


        :return: The pf of this Limit.
        :rtype: float
        """
        return self._pf

    @pf.setter
    def pf(self, pf: float):
        """Sets the pf of this Limit.


        :param pf: The pf of this Limit.
        :type pf: float
        """
        if pf is not None and pf > 1:  # noqa: E501
            raise ValueError("Invalid value for `pf`, must be a value less than or equal to `1`")  # noqa: E501
        if pf is not None and pf < 0:  # noqa: E501
            raise ValueError("Invalid value for `pf`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pf = pf

    @property
    def mva(self) -> float:
        """Gets the mva of this Limit.


        :return: The mva of this Limit.
        :rtype: float
        """
        return self._mva

    @mva.setter
    def mva(self, mva: float):
        """Sets the mva of this Limit.


        :param mva: The mva of this Limit.
        :type mva: float
        """
        if mva is None:
            raise ValueError("Invalid value for `mva`, must not be `None`")  # noqa: E501
        if mva is not None and mva > 10000:  # noqa: E501
            raise ValueError("Invalid value for `mva`, must be a value less than or equal to `10000`")  # noqa: E501
        if mva is not None and mva < 1:  # noqa: E501
            raise ValueError("Invalid value for `mva`, must be a value greater than or equal to `1`")  # noqa: E501

        self._mva = mva

    @property
    def amps(self) -> float:
        """Gets the amps of this Limit.


        :return: The amps of this Limit.
        :rtype: float
        """
        return self._amps

    @amps.setter
    def amps(self, amps: float):
        """Sets the amps of this Limit.


        :param amps: The amps of this Limit.
        :type amps: float
        """
        if amps is None:
            raise ValueError("Invalid value for `amps`, must not be `None`")  # noqa: E501
        if amps is not None and amps > 100000:  # noqa: E501
            raise ValueError("Invalid value for `amps`, must be a value less than or equal to `100000`")  # noqa: E501
        if amps is not None and amps < 1:  # noqa: E501
            raise ValueError("Invalid value for `amps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amps = amps

    @property
    def mvar(self) -> float:
        """Gets the mvar of this Limit.


        :return: The mvar of this Limit.
        :rtype: float
        """
        return self._mvar

    @mvar.setter
    def mvar(self, mvar: float):
        """Sets the mvar of this Limit.


        :param mvar: The mvar of this Limit.
        :type mvar: float
        """
        if mvar is None:
            raise ValueError("Invalid value for `mvar`, must not be `None`")  # noqa: E501
        if mvar is not None and mvar > 10000:  # noqa: E501
            raise ValueError("Invalid value for `mvar`, must be a value less than or equal to `10000`")  # noqa: E501
        if mvar is not None and mvar < -10000:  # noqa: E501
            raise ValueError("Invalid value for `mvar`, must be a value greater than or equal to `-10000`")  # noqa: E501

        self._mvar = mvar

    @property
    def voltage_pu_max(self) -> float:
        """Gets the voltage_pu_max of this Limit.


        :return: The voltage_pu_max of this Limit.
        :rtype: float
        """
        return self._voltage_pu_max

    @voltage_pu_max.setter
    def voltage_pu_max(self, voltage_pu_max: float):
        """Sets the voltage_pu_max of this Limit.


        :param voltage_pu_max: The voltage_pu_max of this Limit.
        :type voltage_pu_max: float
        """
        if voltage_pu_max is None:
            raise ValueError("Invalid value for `voltage_pu_max`, must not be `None`")  # noqa: E501
        if voltage_pu_max is not None and voltage_pu_max > 2:  # noqa: E501
            raise ValueError("Invalid value for `voltage_pu_max`, must be a value less than or equal to `2`")  # noqa: E501
        if voltage_pu_max is not None and voltage_pu_max < 0:  # noqa: E501
            raise ValueError("Invalid value for `voltage_pu_max`, must be a value greater than or equal to `0`")  # noqa: E501

        self._voltage_pu_max = voltage_pu_max

    @property
    def base_k_v(self) -> float:
        """Gets the base_k_v of this Limit.


        :return: The base_k_v of this Limit.
        :rtype: float
        """
        return self._base_k_v

    @base_k_v.setter
    def base_k_v(self, base_k_v: float):
        """Sets the base_k_v of this Limit.


        :param base_k_v: The base_k_v of this Limit.
        :type base_k_v: float
        """
        if base_k_v is not None and base_k_v > 1100:  # noqa: E501
            raise ValueError("Invalid value for `base_k_v`, must be a value less than or equal to `1100`")  # noqa: E501
        if base_k_v is not None and base_k_v < 0:  # noqa: E501
            raise ValueError("Invalid value for `base_k_v`, must be a value greater than or equal to `0`")  # noqa: E501

        self._base_k_v = base_k_v

    @property
    def k_v_max(self) -> float:
        """Gets the k_v_max of this Limit.


        :return: The k_v_max of this Limit.
        :rtype: float
        """
        return self._k_v_max

    @k_v_max.setter
    def k_v_max(self, k_v_max: float):
        """Sets the k_v_max of this Limit.


        :param k_v_max: The k_v_max of this Limit.
        :type k_v_max: float
        """
        if k_v_max is None:
            raise ValueError("Invalid value for `k_v_max`, must not be `None`")  # noqa: E501
        if k_v_max is not None and k_v_max > 1100:  # noqa: E501
            raise ValueError("Invalid value for `k_v_max`, must be a value less than or equal to `1100`")  # noqa: E501
        if k_v_max is not None and k_v_max < 0:  # noqa: E501
            raise ValueError("Invalid value for `k_v_max`, must be a value greater than or equal to `0`")  # noqa: E501

        self._k_v_max = k_v_max

    @property
    def voltage_pu_min(self) -> float:
        """Gets the voltage_pu_min of this Limit.


        :return: The voltage_pu_min of this Limit.
        :rtype: float
        """
        return self._voltage_pu_min

    @voltage_pu_min.setter
    def voltage_pu_min(self, voltage_pu_min: float):
        """Sets the voltage_pu_min of this Limit.


        :param voltage_pu_min: The voltage_pu_min of this Limit.
        :type voltage_pu_min: float
        """
        if voltage_pu_min is None:
            raise ValueError("Invalid value for `voltage_pu_min`, must not be `None`")  # noqa: E501
        if voltage_pu_min is not None and voltage_pu_min > 2:  # noqa: E501
            raise ValueError("Invalid value for `voltage_pu_min`, must be a value less than or equal to `2`")  # noqa: E501
        if voltage_pu_min is not None and voltage_pu_min < 0:  # noqa: E501
            raise ValueError("Invalid value for `voltage_pu_min`, must be a value greater than or equal to `0`")  # noqa: E501

        self._voltage_pu_min = voltage_pu_min

    @property
    def k_v_min(self) -> float:
        """Gets the k_v_min of this Limit.


        :return: The k_v_min of this Limit.
        :rtype: float
        """
        return self._k_v_min

    @k_v_min.setter
    def k_v_min(self, k_v_min: float):
        """Sets the k_v_min of this Limit.


        :param k_v_min: The k_v_min of this Limit.
        :type k_v_min: float
        """
        if k_v_min is None:
            raise ValueError("Invalid value for `k_v_min`, must not be `None`")  # noqa: E501
        if k_v_min is not None and k_v_min > 1100:  # noqa: E501
            raise ValueError("Invalid value for `k_v_min`, must be a value less than or equal to `1100`")  # noqa: E501
        if k_v_min is not None and k_v_min < 0:  # noqa: E501
            raise ValueError("Invalid value for `k_v_min`, must be a value greater than or equal to `0`")  # noqa: E501

        self._k_v_min = k_v_min
