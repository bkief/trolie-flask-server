from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask import util


class LimitProposalAllOfInputsUsed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, value=None, unit=None):  # noqa: E501
        """LimitProposalAllOfInputsUsed - a model defined in OpenAPI

        :param name: The name of this LimitProposalAllOfInputsUsed.  # noqa: E501
        :type name: str
        :param value: The value of this LimitProposalAllOfInputsUsed.  # noqa: E501
        :type value: object
        :param unit: The unit of this LimitProposalAllOfInputsUsed.  # noqa: E501
        :type unit: str
        """
        self.openapi_types = {
            'name': str,
            'value': object,
            'unit': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'unit': 'unit'
        }

        self._name = name
        self._value = value
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'LimitProposalAllOfInputsUsed':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The limit_proposal_allOf_inputs_used of this LimitProposalAllOfInputsUsed.  # noqa: E501
        :rtype: LimitProposalAllOfInputsUsed
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this LimitProposalAllOfInputsUsed.


        :return: The name of this LimitProposalAllOfInputsUsed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this LimitProposalAllOfInputsUsed.


        :param name: The name of this LimitProposalAllOfInputsUsed.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def value(self) -> object:
        """Gets the value of this LimitProposalAllOfInputsUsed.

        This could be any value: a bit, float, integer, string, etc.   # noqa: E501

        :return: The value of this LimitProposalAllOfInputsUsed.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value: object):
        """Sets the value of this LimitProposalAllOfInputsUsed.

        This could be any value: a bit, float, integer, string, etc.   # noqa: E501

        :param value: The value of this LimitProposalAllOfInputsUsed.
        :type value: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def unit(self) -> str:
        """Gets the unit of this LimitProposalAllOfInputsUsed.

        If the `value` is dimensionless, this property should not be provided. Since we are not specifying which inputs shall be provided, we cannot specify a definitive list of units, but implementors are encouraged to use UnitSymbol from CIM when appropriate: The CIM may not include appropriate units for all inputs, e.g., wind speed.   # noqa: E501

        :return: The unit of this LimitProposalAllOfInputsUsed.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this LimitProposalAllOfInputsUsed.

        If the `value` is dimensionless, this property should not be provided. Since we are not specifying which inputs shall be provided, we cannot specify a definitive list of units, but implementors are encouraged to use UnitSymbol from CIM when appropriate: The CIM may not include appropriate units for all inputs, e.g., wind speed.   # noqa: E501

        :param unit: The unit of this LimitProposalAllOfInputsUsed.
        :type unit: str
        """
        if unit is not None and len(unit) > 50:
            raise ValueError("Invalid value for `unit`, length must be less than or equal to `50`")  # noqa: E501

        self._unit = unit
