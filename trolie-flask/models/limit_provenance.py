from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.limit_provenance_overrides_inner import LimitProvenanceOverridesInner
from openapi_server.models.limit_provenance_proposals_considered_inner import LimitProvenanceProposalsConsideredInner
from openapi_server import util

from openapi_server.models.limit_provenance_overrides_inner import LimitProvenanceOverridesInner  # noqa: E501
from openapi_server.models.limit_provenance_proposals_considered_inner import LimitProvenanceProposalsConsideredInner  # noqa: E501

class LimitProvenance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, proposals_considered=None, temporary_aar_exceptions=None, overrides=None, additional_data=None):  # noqa: E501
        """LimitProvenance - a model defined in OpenAPI

        :param proposals_considered: The proposals_considered of this LimitProvenance.  # noqa: E501
        :type proposals_considered: List[LimitProvenanceProposalsConsideredInner]
        :param temporary_aar_exceptions: The temporary_aar_exceptions of this LimitProvenance.  # noqa: E501
        :type temporary_aar_exceptions: List[str]
        :param overrides: The overrides of this LimitProvenance.  # noqa: E501
        :type overrides: List[LimitProvenanceOverridesInner]
        :param additional_data: The additional_data of this LimitProvenance.  # noqa: E501
        :type additional_data: object
        """
        self.openapi_types = {
            'proposals_considered': List[LimitProvenanceProposalsConsideredInner],
            'temporary_aar_exceptions': List[str],
            'overrides': List[LimitProvenanceOverridesInner],
            'additional_data': object
        }

        self.attribute_map = {
            'proposals_considered': 'proposals-considered',
            'temporary_aar_exceptions': 'temporary-aar-exceptions',
            'overrides': 'overrides',
            'additional_data': 'additional-data'
        }

        self._proposals_considered = proposals_considered
        self._temporary_aar_exceptions = temporary_aar_exceptions
        self._overrides = overrides
        self._additional_data = additional_data

    @classmethod
    def from_dict(cls, dikt) -> 'LimitProvenance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The limit-provenance of this LimitProvenance.  # noqa: E501
        :rtype: LimitProvenance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def proposals_considered(self) -> List[LimitProvenanceProposalsConsideredInner]:
        """Gets the proposals_considered of this LimitProvenance.

         The forecast proposals provided by the Ratings Providers during the Forecast Window for this limits snapshot.   # noqa: E501

        :return: The proposals_considered of this LimitProvenance.
        :rtype: List[LimitProvenanceProposalsConsideredInner]
        """
        return self._proposals_considered

    @proposals_considered.setter
    def proposals_considered(self, proposals_considered: List[LimitProvenanceProposalsConsideredInner]):
        """Sets the proposals_considered of this LimitProvenance.

         The forecast proposals provided by the Ratings Providers during the Forecast Window for this limits snapshot.   # noqa: E501

        :param proposals_considered: The proposals_considered of this LimitProvenance.
        :type proposals_considered: List[LimitProvenanceProposalsConsideredInner]
        """
        if proposals_considered is None:
            raise ValueError("Invalid value for `proposals_considered`, must not be `None`")  # noqa: E501
        if proposals_considered is not None and len(proposals_considered) > 10:
            raise ValueError("Invalid value for `proposals_considered`, number of items must be less than or equal to `10`")  # noqa: E501

        self._proposals_considered = proposals_considered

    @property
    def temporary_aar_exceptions(self) -> List[str]:
        """Gets the temporary_aar_exceptions of this LimitProvenance.

         The temporary AAR exceptions for the facility that were active when this snapshot was generated.   # noqa: E501

        :return: The temporary_aar_exceptions of this LimitProvenance.
        :rtype: List[str]
        """
        return self._temporary_aar_exceptions

    @temporary_aar_exceptions.setter
    def temporary_aar_exceptions(self, temporary_aar_exceptions: List[str]):
        """Sets the temporary_aar_exceptions of this LimitProvenance.

         The temporary AAR exceptions for the facility that were active when this snapshot was generated.   # noqa: E501

        :param temporary_aar_exceptions: The temporary_aar_exceptions of this LimitProvenance.
        :type temporary_aar_exceptions: List[str]
        """
        if temporary_aar_exceptions is not None and len(temporary_aar_exceptions) > 10:
            raise ValueError("Invalid value for `temporary_aar_exceptions`, number of items must be less than or equal to `10`")  # noqa: E501

        self._temporary_aar_exceptions = temporary_aar_exceptions

    @property
    def overrides(self) -> List[LimitProvenanceOverridesInner]:
        """Gets the overrides of this LimitProvenance.


        :return: The overrides of this LimitProvenance.
        :rtype: List[LimitProvenanceOverridesInner]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides: List[LimitProvenanceOverridesInner]):
        """Sets the overrides of this LimitProvenance.


        :param overrides: The overrides of this LimitProvenance.
        :type overrides: List[LimitProvenanceOverridesInner]
        """
        if overrides is not None and len(overrides) > 10:
            raise ValueError("Invalid value for `overrides`, number of items must be less than or equal to `10`")  # noqa: E501
        if overrides is not None and len(overrides) < 0:
            raise ValueError("Invalid value for `overrides`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._overrides = overrides

    @property
    def additional_data(self) -> object:
        """Gets the additional_data of this LimitProvenance.

         Implementors may use this object to provide freeform extensions with additional traceability / provenance data to be included with the limit. Schema of this object is out of scope of the TROLIE specification.   # noqa: E501

        :return: The additional_data of this LimitProvenance.
        :rtype: object
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data: object):
        """Sets the additional_data of this LimitProvenance.

         Implementors may use this object to provide freeform extensions with additional traceability / provenance data to be included with the limit. Schema of this object is out of scope of the TROLIE specification.   # noqa: E501

        :param additional_data: The additional_data of this LimitProvenance.
        :type additional_data: object
        """

        self._additional_data = additional_data
