from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.limit_data import LimitData
from openapi_server import util

from openapi_server.models.limit_data import LimitData  # noqa: E501

class LimitProvenanceOverridesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, override=None, override_reason=None):  # noqa: E501
        """LimitProvenanceOverridesInner - a model defined in OpenAPI

        :param override: The override of this LimitProvenanceOverridesInner.  # noqa: E501
        :type override: LimitData
        :param override_reason: The override_reason of this LimitProvenanceOverridesInner.  # noqa: E501
        :type override_reason: str
        """
        self.openapi_types = {
            'override': LimitData,
            'override_reason': str
        }

        self.attribute_map = {
            'override': 'override',
            'override_reason': 'override-reason'
        }

        self._override = override
        self._override_reason = override_reason

    @classmethod
    def from_dict(cls, dikt) -> 'LimitProvenanceOverridesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The limit_provenance_overrides_inner of this LimitProvenanceOverridesInner.  # noqa: E501
        :rtype: LimitProvenanceOverridesInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def override(self) -> LimitData:
        """Gets the override of this LimitProvenanceOverridesInner.


        :return: The override of this LimitProvenanceOverridesInner.
        :rtype: LimitData
        """
        return self._override

    @override.setter
    def override(self, override: LimitData):
        """Sets the override of this LimitProvenanceOverridesInner.


        :param override: The override of this LimitProvenanceOverridesInner.
        :type override: LimitData
        """
        if override is None:
            raise ValueError("Invalid value for `override`, must not be `None`")  # noqa: E501

        self._override = override

    @property
    def override_reason(self) -> str:
        """Gets the override_reason of this LimitProvenanceOverridesInner.

        Indicates that this limit was overridden for some reason, the reason itself.  # noqa: E501

        :return: The override_reason of this LimitProvenanceOverridesInner.
        :rtype: str
        """
        return self._override_reason

    @override_reason.setter
    def override_reason(self, override_reason: str):
        """Sets the override_reason of this LimitProvenanceOverridesInner.

        Indicates that this limit was overridden for some reason, the reason itself.  # noqa: E501

        :param override_reason: The override_reason of this LimitProvenanceOverridesInner.
        :type override_reason: str
        """
        if override_reason is None:
            raise ValueError("Invalid value for `override_reason`, must not be `None`")  # noqa: E501
        if override_reason is not None and len(override_reason) > 500:
            raise ValueError("Invalid value for `override_reason`, length must be less than or equal to `500`")  # noqa: E501

        self._override_reason = override_reason
