from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask.models.names_alternate_identifiers_inner import NamesAlternateIdentifiersInner
import re
from trolie-flask import util

from trolie-flask.models.names_alternate_identifiers_inner import NamesAlternateIdentifiersInner  # noqa: E501
import re  # noqa: E501

class Names(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id=None, alternate_identifiers=None):  # noqa: E501
        """Names - a model defined in OpenAPI

        :param resource_id: The resource_id of this Names.  # noqa: E501
        :type resource_id: str
        :param alternate_identifiers: The alternate_identifiers of this Names.  # noqa: E501
        :type alternate_identifiers: List[NamesAlternateIdentifiersInner]
        """
        self.openapi_types = {
            'resource_id': str,
            'alternate_identifiers': List[NamesAlternateIdentifiersInner]
        }

        self.attribute_map = {
            'resource_id': 'resource-id',
            'alternate_identifiers': 'alternate-identifiers'
        }

        self._resource_id = resource_id
        self._alternate_identifiers = alternate_identifiers

    @classmethod
    def from_dict(cls, dikt) -> 'Names':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The names of this Names.  # noqa: E501
        :rtype: Names
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self) -> str:
        """Gets the resource_id of this Names.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :return: The resource_id of this Names.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: str):
        """Sets the resource_id of this Names.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :param resource_id: The resource_id of this Names.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501
        if resource_id is not None and len(resource_id) > 250:
            raise ValueError("Invalid value for `resource_id`, length must be less than or equal to `250`")  # noqa: E501
        if resource_id is not None and not re.search(r'^(.){0,250}$', resource_id):  # noqa: E501
            raise ValueError("Invalid value for `resource_id`, must be a follow pattern or equal to `/^(.){0,250}$/`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def alternate_identifiers(self) -> List[NamesAlternateIdentifiersInner]:
        """Gets the alternate_identifiers of this Names.


        :return: The alternate_identifiers of this Names.
        :rtype: List[NamesAlternateIdentifiersInner]
        """
        return self._alternate_identifiers

    @alternate_identifiers.setter
    def alternate_identifiers(self, alternate_identifiers: List[NamesAlternateIdentifiersInner]):
        """Sets the alternate_identifiers of this Names.


        :param alternate_identifiers: The alternate_identifiers of this Names.
        :type alternate_identifiers: List[NamesAlternateIdentifiersInner]
        """
        if alternate_identifiers is not None and len(alternate_identifiers) > 10:
            raise ValueError("Invalid value for `alternate_identifiers`, number of items must be less than or equal to `10`")  # noqa: E501
        if alternate_identifiers is not None and len(alternate_identifiers) < 1:
            raise ValueError("Invalid value for `alternate_identifiers`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._alternate_identifiers = alternate_identifiers
