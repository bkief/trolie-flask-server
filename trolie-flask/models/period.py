from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Period(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, period_start=None, period_end=None):  # noqa: E501
        """Period - a model defined in OpenAPI

        :param period_start: The period_start of this Period.  # noqa: E501
        :type period_start: datetime
        :param period_end: The period_end of this Period.  # noqa: E501
        :type period_end: datetime
        """
        self.openapi_types = {
            'period_start': datetime,
            'period_end': datetime
        }

        self.attribute_map = {
            'period_start': 'period-start',
            'period_end': 'period-end'
        }

        self._period_start = period_start
        self._period_end = period_end

    @classmethod
    def from_dict(cls, dikt) -> 'Period':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The period of this Period.  # noqa: E501
        :rtype: Period
        """
        return util.deserialize_model(dikt, cls)

    @property
    def period_start(self) -> datetime:
        """Gets the period_start of this Period.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :return: The period_start of this Period.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start: datetime):
        """Sets the period_start of this Period.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :param period_start: The period_start of this Period.
        :type period_start: datetime
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")  # noqa: E501
        if period_start is not None and len(period_start) > 25:
            raise ValueError("Invalid value for `period_start`, length must be less than or equal to `25`")  # noqa: E501

        self._period_start = period_start

    @property
    def period_end(self) -> datetime:
        """Gets the period_end of this Period.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :return: The period_end of this Period.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end: datetime):
        """Sets the period_end of this Period.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :param period_end: The period_end of this Period.
        :type period_end: datetime
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")  # noqa: E501
        if period_end is not None and len(period_end) > 25:
            raise ValueError("Invalid value for `period_end`, length must be less than or equal to `25`")  # noqa: E501

        self._period_end = period_end
