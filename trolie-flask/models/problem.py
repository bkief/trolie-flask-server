from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask import util


class Problem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, title=None, status=None, detail=None, instance=None):  # noqa: E501
        """Problem - a model defined in OpenAPI

        :param type: The type of this Problem.  # noqa: E501
        :type type: str
        :param title: The title of this Problem.  # noqa: E501
        :type title: str
        :param status: The status of this Problem.  # noqa: E501
        :type status: float
        :param detail: The detail of this Problem.  # noqa: E501
        :type detail: str
        :param instance: The instance of this Problem.  # noqa: E501
        :type instance: str
        """
        self.openapi_types = {
            'type': str,
            'title': str,
            'status': float,
            'detail': str,
            'instance': str
        }

        self.attribute_map = {
            'type': 'type',
            'title': 'title',
            'status': 'status',
            'detail': 'detail',
            'instance': 'instance'
        }

        self._type = type
        self._title = title
        self._status = status
        self._detail = detail
        self._instance = instance

    @classmethod
    def from_dict(cls, dikt) -> 'Problem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The problem of this Problem.  # noqa: E501
        :rtype: Problem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Problem.

        A URI reference that identifies the problem type. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-type)   # noqa: E501

        :return: The type of this Problem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Problem.

        A URI reference that identifies the problem type. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-type)   # noqa: E501

        :param type: The type of this Problem.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if type is not None and len(type) > 2048:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `2048`")  # noqa: E501

        self._type = type

    @property
    def title(self) -> str:
        """Gets the title of this Problem.

        A short, human-readable summary of the problem type. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-title)   # noqa: E501

        :return: The title of this Problem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Problem.

        A short, human-readable summary of the problem type. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-title)   # noqa: E501

        :param title: The title of this Problem.
        :type title: str
        """
        if title is not None and len(title) > 500:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `500`")  # noqa: E501

        self._title = title

    @property
    def status(self) -> float:
        """Gets the status of this Problem.

        The HTTP status code generated by the origin server for this occurrence of the problem.   # noqa: E501

        :return: The status of this Problem.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status: float):
        """Sets the status of this Problem.

        The HTTP status code generated by the origin server for this occurrence of the problem.   # noqa: E501

        :param status: The status of this Problem.
        :type status: float
        """
        if status is not None and status > 599:  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `599`")  # noqa: E501
        if status is not None and status < 100:  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `100`")  # noqa: E501

        self._status = status

    @property
    def detail(self) -> str:
        """Gets the detail of this Problem.

        A human-readable explanation specific to this occurrence of the problem. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-detail)  # noqa: E501

        :return: The detail of this Problem.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail: str):
        """Sets the detail of this Problem.

        A human-readable explanation specific to this occurrence of the problem. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-detail)  # noqa: E501

        :param detail: The detail of this Problem.
        :type detail: str
        """
        if detail is not None and len(detail) > 500:
            raise ValueError("Invalid value for `detail`, length must be less than or equal to `500`")  # noqa: E501

        self._detail = detail

    @property
    def instance(self) -> str:
        """Gets the instance of this Problem.

        A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-status)   # noqa: E501

        :return: The instance of this Problem.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance: str):
        """Sets the instance of this Problem.

        A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. See [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457#name-status)   # noqa: E501

        :param instance: The instance of this Problem.
        :type instance: str
        """
        if instance is not None and len(instance) > 2048:
            raise ValueError("Invalid value for `instance`, length must be less than or equal to `2048`")  # noqa: E501

        self._instance = instance
