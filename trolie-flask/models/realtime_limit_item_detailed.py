from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask.models.limit import Limit
from trolie-flask.models.limit_provenance_overrides_inner import LimitProvenanceOverridesInner
from trolie-flask.models.limit_provenance_proposals_considered_inner import LimitProvenanceProposalsConsideredInner
from trolie-flask.models.limit_value_set_inner import LimitValueSetInner
import re
from trolie-flask import util

from trolie-flask.models.limit import Limit  # noqa: E501
from trolie-flask.models.limit_provenance_overrides_inner import LimitProvenanceOverridesInner  # noqa: E501
from trolie-flask.models.limit_provenance_proposals_considered_inner import LimitProvenanceProposalsConsideredInner  # noqa: E501
from trolie-flask.models.limit_value_set_inner import LimitValueSetInner  # noqa: E501
import re  # noqa: E501

class RealtimeLimitItemDetailed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id=None, continuous_operating_limit=None, emergency_operating_limits=None, proposals_considered=None, temporary_aar_exceptions=None, overrides=None, additional_data=None):  # noqa: E501
        """RealtimeLimitItemDetailed - a model defined in OpenAPI

        :param resource_id: The resource_id of this RealtimeLimitItemDetailed.  # noqa: E501
        :type resource_id: str
        :param continuous_operating_limit: The continuous_operating_limit of this RealtimeLimitItemDetailed.  # noqa: E501
        :type continuous_operating_limit: Limit
        :param emergency_operating_limits: The emergency_operating_limits of this RealtimeLimitItemDetailed.  # noqa: E501
        :type emergency_operating_limits: List[LimitValueSetInner]
        :param proposals_considered: The proposals_considered of this RealtimeLimitItemDetailed.  # noqa: E501
        :type proposals_considered: List[LimitProvenanceProposalsConsideredInner]
        :param temporary_aar_exceptions: The temporary_aar_exceptions of this RealtimeLimitItemDetailed.  # noqa: E501
        :type temporary_aar_exceptions: List[str]
        :param overrides: The overrides of this RealtimeLimitItemDetailed.  # noqa: E501
        :type overrides: List[LimitProvenanceOverridesInner]
        :param additional_data: The additional_data of this RealtimeLimitItemDetailed.  # noqa: E501
        :type additional_data: object
        """
        self.openapi_types = {
            'resource_id': str,
            'continuous_operating_limit': Limit,
            'emergency_operating_limits': List[LimitValueSetInner],
            'proposals_considered': List[LimitProvenanceProposalsConsideredInner],
            'temporary_aar_exceptions': List[str],
            'overrides': List[LimitProvenanceOverridesInner],
            'additional_data': object
        }

        self.attribute_map = {
            'resource_id': 'resource-id',
            'continuous_operating_limit': 'continuous-operating-limit',
            'emergency_operating_limits': 'emergency-operating-limits',
            'proposals_considered': 'proposals-considered',
            'temporary_aar_exceptions': 'temporary-aar-exceptions',
            'overrides': 'overrides',
            'additional_data': 'additional-data'
        }

        self._resource_id = resource_id
        self._continuous_operating_limit = continuous_operating_limit
        self._emergency_operating_limits = emergency_operating_limits
        self._proposals_considered = proposals_considered
        self._temporary_aar_exceptions = temporary_aar_exceptions
        self._overrides = overrides
        self._additional_data = additional_data

    @classmethod
    def from_dict(cls, dikt) -> 'RealtimeLimitItemDetailed':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The realtime-limit-item-detailed of this RealtimeLimitItemDetailed.  # noqa: E501
        :rtype: RealtimeLimitItemDetailed
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self) -> str:
        """Gets the resource_id of this RealtimeLimitItemDetailed.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :return: The resource_id of this RealtimeLimitItemDetailed.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: str):
        """Sets the resource_id of this RealtimeLimitItemDetailed.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :param resource_id: The resource_id of this RealtimeLimitItemDetailed.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501
        if resource_id is not None and len(resource_id) > 250:
            raise ValueError("Invalid value for `resource_id`, length must be less than or equal to `250`")  # noqa: E501
        if resource_id is not None and not re.search(r'^(.){0,250}$', resource_id):  # noqa: E501
            raise ValueError("Invalid value for `resource_id`, must be a follow pattern or equal to `/^(.){0,250}$/`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def continuous_operating_limit(self) -> Limit:
        """Gets the continuous_operating_limit of this RealtimeLimitItemDetailed.


        :return: The continuous_operating_limit of this RealtimeLimitItemDetailed.
        :rtype: Limit
        """
        return self._continuous_operating_limit

    @continuous_operating_limit.setter
    def continuous_operating_limit(self, continuous_operating_limit: Limit):
        """Sets the continuous_operating_limit of this RealtimeLimitItemDetailed.


        :param continuous_operating_limit: The continuous_operating_limit of this RealtimeLimitItemDetailed.
        :type continuous_operating_limit: Limit
        """
        if continuous_operating_limit is None:
            raise ValueError("Invalid value for `continuous_operating_limit`, must not be `None`")  # noqa: E501

        self._continuous_operating_limit = continuous_operating_limit

    @property
    def emergency_operating_limits(self) -> List[LimitValueSetInner]:
        """Gets the emergency_operating_limits of this RealtimeLimitItemDetailed.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :return: The emergency_operating_limits of this RealtimeLimitItemDetailed.
        :rtype: List[LimitValueSetInner]
        """
        return self._emergency_operating_limits

    @emergency_operating_limits.setter
    def emergency_operating_limits(self, emergency_operating_limits: List[LimitValueSetInner]):
        """Sets the emergency_operating_limits of this RealtimeLimitItemDetailed.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :param emergency_operating_limits: The emergency_operating_limits of this RealtimeLimitItemDetailed.
        :type emergency_operating_limits: List[LimitValueSetInner]
        """
        if emergency_operating_limits is None:
            raise ValueError("Invalid value for `emergency_operating_limits`, must not be `None`")  # noqa: E501
        if emergency_operating_limits is not None and len(emergency_operating_limits) > 10:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be less than or equal to `10`")  # noqa: E501
        if emergency_operating_limits is not None and len(emergency_operating_limits) < 1:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._emergency_operating_limits = emergency_operating_limits

    @property
    def proposals_considered(self) -> List[LimitProvenanceProposalsConsideredInner]:
        """Gets the proposals_considered of this RealtimeLimitItemDetailed.

         The forecast proposals provided by the Ratings Providers during the Forecast Window for this limits snapshot.   # noqa: E501

        :return: The proposals_considered of this RealtimeLimitItemDetailed.
        :rtype: List[LimitProvenanceProposalsConsideredInner]
        """
        return self._proposals_considered

    @proposals_considered.setter
    def proposals_considered(self, proposals_considered: List[LimitProvenanceProposalsConsideredInner]):
        """Sets the proposals_considered of this RealtimeLimitItemDetailed.

         The forecast proposals provided by the Ratings Providers during the Forecast Window for this limits snapshot.   # noqa: E501

        :param proposals_considered: The proposals_considered of this RealtimeLimitItemDetailed.
        :type proposals_considered: List[LimitProvenanceProposalsConsideredInner]
        """
        if proposals_considered is None:
            raise ValueError("Invalid value for `proposals_considered`, must not be `None`")  # noqa: E501
        if proposals_considered is not None and len(proposals_considered) > 10:
            raise ValueError("Invalid value for `proposals_considered`, number of items must be less than or equal to `10`")  # noqa: E501

        self._proposals_considered = proposals_considered

    @property
    def temporary_aar_exceptions(self) -> List[str]:
        """Gets the temporary_aar_exceptions of this RealtimeLimitItemDetailed.

         The temporary AAR exceptions for the facility that were active when this snapshot was generated.   # noqa: E501

        :return: The temporary_aar_exceptions of this RealtimeLimitItemDetailed.
        :rtype: List[str]
        """
        return self._temporary_aar_exceptions

    @temporary_aar_exceptions.setter
    def temporary_aar_exceptions(self, temporary_aar_exceptions: List[str]):
        """Sets the temporary_aar_exceptions of this RealtimeLimitItemDetailed.

         The temporary AAR exceptions for the facility that were active when this snapshot was generated.   # noqa: E501

        :param temporary_aar_exceptions: The temporary_aar_exceptions of this RealtimeLimitItemDetailed.
        :type temporary_aar_exceptions: List[str]
        """
        if temporary_aar_exceptions is not None and len(temporary_aar_exceptions) > 10:
            raise ValueError("Invalid value for `temporary_aar_exceptions`, number of items must be less than or equal to `10`")  # noqa: E501

        self._temporary_aar_exceptions = temporary_aar_exceptions

    @property
    def overrides(self) -> List[LimitProvenanceOverridesInner]:
        """Gets the overrides of this RealtimeLimitItemDetailed.


        :return: The overrides of this RealtimeLimitItemDetailed.
        :rtype: List[LimitProvenanceOverridesInner]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides: List[LimitProvenanceOverridesInner]):
        """Sets the overrides of this RealtimeLimitItemDetailed.


        :param overrides: The overrides of this RealtimeLimitItemDetailed.
        :type overrides: List[LimitProvenanceOverridesInner]
        """
        if overrides is not None and len(overrides) > 10:
            raise ValueError("Invalid value for `overrides`, number of items must be less than or equal to `10`")  # noqa: E501
        if overrides is not None and len(overrides) < 0:
            raise ValueError("Invalid value for `overrides`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._overrides = overrides

    @property
    def additional_data(self) -> object:
        """Gets the additional_data of this RealtimeLimitItemDetailed.

         Implementors may use this object to provide freeform extensions with additional traceability / provenance data to be included with the limit. Schema of this object is out of scope of the TROLIE specification.   # noqa: E501

        :return: The additional_data of this RealtimeLimitItemDetailed.
        :rtype: object
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data: object):
        """Sets the additional_data of this RealtimeLimitItemDetailed.

         Implementors may use this object to provide freeform extensions with additional traceability / provenance data to be included with the limit. Schema of this object is out of scope of the TROLIE specification.   # noqa: E501

        :param additional_data: The additional_data of this RealtimeLimitItemDetailed.
        :type additional_data: object
        """

        self._additional_data = additional_data
