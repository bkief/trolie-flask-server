from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask.models.seasonal_rating_snapshot_value import SeasonalRatingSnapshotValue
import re
from trolie-flask import util

from trolie-flask.models.seasonal_rating_snapshot_value import SeasonalRatingSnapshotValue  # noqa: E501
import re  # noqa: E501

class SeasonalRatingSnapshotItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id=None, seasons=None):  # noqa: E501
        """SeasonalRatingSnapshotItem - a model defined in OpenAPI

        :param resource_id: The resource_id of this SeasonalRatingSnapshotItem.  # noqa: E501
        :type resource_id: str
        :param seasons: The seasons of this SeasonalRatingSnapshotItem.  # noqa: E501
        :type seasons: List[SeasonalRatingSnapshotValue]
        """
        self.openapi_types = {
            'resource_id': str,
            'seasons': List[SeasonalRatingSnapshotValue]
        }

        self.attribute_map = {
            'resource_id': 'resource-id',
            'seasons': 'seasons'
        }

        self._resource_id = resource_id
        self._seasons = seasons

    @classmethod
    def from_dict(cls, dikt) -> 'SeasonalRatingSnapshotItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The seasonal-rating-snapshot-item of this SeasonalRatingSnapshotItem.  # noqa: E501
        :rtype: SeasonalRatingSnapshotItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self) -> str:
        """Gets the resource_id of this SeasonalRatingSnapshotItem.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :return: The resource_id of this SeasonalRatingSnapshotItem.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: str):
        """Sets the resource_id of this SeasonalRatingSnapshotItem.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :param resource_id: The resource_id of this SeasonalRatingSnapshotItem.
        :type resource_id: str
        """
        if resource_id is not None and len(resource_id) > 250:
            raise ValueError("Invalid value for `resource_id`, length must be less than or equal to `250`")  # noqa: E501
        if resource_id is not None and not re.search(r'^(.){0,250}$', resource_id):  # noqa: E501
            raise ValueError("Invalid value for `resource_id`, must be a follow pattern or equal to `/^(.){0,250}$/`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def seasons(self) -> List[SeasonalRatingSnapshotValue]:
        """Gets the seasons of this SeasonalRatingSnapshotItem.


        :return: The seasons of this SeasonalRatingSnapshotItem.
        :rtype: List[SeasonalRatingSnapshotValue]
        """
        return self._seasons

    @seasons.setter
    def seasons(self, seasons: List[SeasonalRatingSnapshotValue]):
        """Sets the seasons of this SeasonalRatingSnapshotItem.


        :param seasons: The seasons of this SeasonalRatingSnapshotItem.
        :type seasons: List[SeasonalRatingSnapshotValue]
        """
        if seasons is not None and len(seasons) > 20:
            raise ValueError("Invalid value for `seasons`, number of items must be less than or equal to `20`")  # noqa: E501
        if seasons is not None and len(seasons) < 0:
            raise ValueError("Invalid value for `seasons`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._seasons = seasons
