from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from trolie-flask.models.base_model import Model
from trolie-flask.models.conditional_value_set_inner import ConditionalValueSetInner
from trolie-flask.models.limit import Limit
from trolie-flask.models.limit_value_set_inner import LimitValueSetInner
import re
from trolie-flask import util

from trolie-flask.models.conditional_value_set_inner import ConditionalValueSetInner  # noqa: E501
from trolie-flask.models.limit import Limit  # noqa: E501
from trolie-flask.models.limit_value_set_inner import LimitValueSetInner  # noqa: E501
import re  # noqa: E501

class SeasonalRatingSnapshotValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, season_instance=None, effective_date=None, continuous_operating_limit=None, emergency_operating_limits=None, conditional_values=None):  # noqa: E501
        """SeasonalRatingSnapshotValue - a model defined in OpenAPI

        :param season_instance: The season_instance of this SeasonalRatingSnapshotValue.  # noqa: E501
        :type season_instance: str
        :param effective_date: The effective_date of this SeasonalRatingSnapshotValue.  # noqa: E501
        :type effective_date: datetime
        :param continuous_operating_limit: The continuous_operating_limit of this SeasonalRatingSnapshotValue.  # noqa: E501
        :type continuous_operating_limit: Limit
        :param emergency_operating_limits: The emergency_operating_limits of this SeasonalRatingSnapshotValue.  # noqa: E501
        :type emergency_operating_limits: List[LimitValueSetInner]
        :param conditional_values: The conditional_values of this SeasonalRatingSnapshotValue.  # noqa: E501
        :type conditional_values: List[ConditionalValueSetInner]
        """
        self.openapi_types = {
            'season_instance': str,
            'effective_date': datetime,
            'continuous_operating_limit': Limit,
            'emergency_operating_limits': List[LimitValueSetInner],
            'conditional_values': List[ConditionalValueSetInner]
        }

        self.attribute_map = {
            'season_instance': 'season-instance',
            'effective_date': 'effective-date',
            'continuous_operating_limit': 'continuous-operating-limit',
            'emergency_operating_limits': 'emergency-operating-limits',
            'conditional_values': 'conditional-values'
        }

        self._season_instance = season_instance
        self._effective_date = effective_date
        self._continuous_operating_limit = continuous_operating_limit
        self._emergency_operating_limits = emergency_operating_limits
        self._conditional_values = conditional_values

    @classmethod
    def from_dict(cls, dikt) -> 'SeasonalRatingSnapshotValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The seasonal-rating-snapshot-value of this SeasonalRatingSnapshotValue.  # noqa: E501
        :rtype: SeasonalRatingSnapshotValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def season_instance(self) -> str:
        """Gets the season_instance of this SeasonalRatingSnapshotValue.

         Contains a unique identifier for an object.    # noqa: E501

        :return: The season_instance of this SeasonalRatingSnapshotValue.
        :rtype: str
        """
        return self._season_instance

    @season_instance.setter
    def season_instance(self, season_instance: str):
        """Sets the season_instance of this SeasonalRatingSnapshotValue.

         Contains a unique identifier for an object.    # noqa: E501

        :param season_instance: The season_instance of this SeasonalRatingSnapshotValue.
        :type season_instance: str
        """
        if season_instance is not None and len(season_instance) > 250:
            raise ValueError("Invalid value for `season_instance`, length must be less than or equal to `250`")  # noqa: E501
        if season_instance is not None and not re.search(r'^(.){0,250}$', season_instance):  # noqa: E501
            raise ValueError("Invalid value for `season_instance`, must be a follow pattern or equal to `/^(.){0,250}$/`")  # noqa: E501

        self._season_instance = season_instance

    @property
    def effective_date(self) -> datetime:
        """Gets the effective_date of this SeasonalRatingSnapshotValue.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :return: The effective_date of this SeasonalRatingSnapshotValue.
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date: datetime):
        """Sets the effective_date of this SeasonalRatingSnapshotValue.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :param effective_date: The effective_date of this SeasonalRatingSnapshotValue.
        :type effective_date: datetime
        """
        if effective_date is not None and len(effective_date) > 25:
            raise ValueError("Invalid value for `effective_date`, length must be less than or equal to `25`")  # noqa: E501

        self._effective_date = effective_date

    @property
    def continuous_operating_limit(self) -> Limit:
        """Gets the continuous_operating_limit of this SeasonalRatingSnapshotValue.


        :return: The continuous_operating_limit of this SeasonalRatingSnapshotValue.
        :rtype: Limit
        """
        return self._continuous_operating_limit

    @continuous_operating_limit.setter
    def continuous_operating_limit(self, continuous_operating_limit: Limit):
        """Sets the continuous_operating_limit of this SeasonalRatingSnapshotValue.


        :param continuous_operating_limit: The continuous_operating_limit of this SeasonalRatingSnapshotValue.
        :type continuous_operating_limit: Limit
        """

        self._continuous_operating_limit = continuous_operating_limit

    @property
    def emergency_operating_limits(self) -> List[LimitValueSetInner]:
        """Gets the emergency_operating_limits of this SeasonalRatingSnapshotValue.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :return: The emergency_operating_limits of this SeasonalRatingSnapshotValue.
        :rtype: List[LimitValueSetInner]
        """
        return self._emergency_operating_limits

    @emergency_operating_limits.setter
    def emergency_operating_limits(self, emergency_operating_limits: List[LimitValueSetInner]):
        """Sets the emergency_operating_limits of this SeasonalRatingSnapshotValue.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :param emergency_operating_limits: The emergency_operating_limits of this SeasonalRatingSnapshotValue.
        :type emergency_operating_limits: List[LimitValueSetInner]
        """
        if emergency_operating_limits is not None and len(emergency_operating_limits) > 10:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be less than or equal to `10`")  # noqa: E501
        if emergency_operating_limits is not None and len(emergency_operating_limits) < 1:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._emergency_operating_limits = emergency_operating_limits

    @property
    def conditional_values(self) -> List[ConditionalValueSetInner]:
        """Gets the conditional_values of this SeasonalRatingSnapshotValue.

        List of alternative ratings for rating altering conditions on the segment.    # noqa: E501

        :return: The conditional_values of this SeasonalRatingSnapshotValue.
        :rtype: List[ConditionalValueSetInner]
        """
        return self._conditional_values

    @conditional_values.setter
    def conditional_values(self, conditional_values: List[ConditionalValueSetInner]):
        """Sets the conditional_values of this SeasonalRatingSnapshotValue.

        List of alternative ratings for rating altering conditions on the segment.    # noqa: E501

        :param conditional_values: The conditional_values of this SeasonalRatingSnapshotValue.
        :type conditional_values: List[ConditionalValueSetInner]
        """
        if conditional_values is not None and len(conditional_values) > 100:
            raise ValueError("Invalid value for `conditional_values`, number of items must be less than or equal to `100`")  # noqa: E501
        if conditional_values is not None and len(conditional_values) < 1:
            raise ValueError("Invalid value for `conditional_values`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._conditional_values = conditional_values
