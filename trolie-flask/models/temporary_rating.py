from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.limit import Limit
from openapi_server.models.limit_value_set_inner import LimitValueSetInner
import re
from openapi_server import util

from openapi_server.models.limit import Limit  # noqa: E501
from openapi_server.models.limit_value_set_inner import LimitValueSetInner  # noqa: E501
import re  # noqa: E501

class TemporaryRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, resource_id=None, start_time=None, end_time=None, updated_time=None, continuous_operating_limit=None, emergency_operating_limits=None, reason=None):  # noqa: E501
        """TemporaryRating - a model defined in OpenAPI

        :param id: The id of this TemporaryRating.  # noqa: E501
        :type id: str
        :param resource_id: The resource_id of this TemporaryRating.  # noqa: E501
        :type resource_id: str
        :param start_time: The start_time of this TemporaryRating.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this TemporaryRating.  # noqa: E501
        :type end_time: datetime
        :param updated_time: The updated_time of this TemporaryRating.  # noqa: E501
        :type updated_time: datetime
        :param continuous_operating_limit: The continuous_operating_limit of this TemporaryRating.  # noqa: E501
        :type continuous_operating_limit: Limit
        :param emergency_operating_limits: The emergency_operating_limits of this TemporaryRating.  # noqa: E501
        :type emergency_operating_limits: List[LimitValueSetInner]
        :param reason: The reason of this TemporaryRating.  # noqa: E501
        :type reason: str
        """
        self.openapi_types = {
            'id': str,
            'resource_id': str,
            'start_time': datetime,
            'end_time': datetime,
            'updated_time': datetime,
            'continuous_operating_limit': Limit,
            'emergency_operating_limits': List[LimitValueSetInner],
            'reason': str
        }

        self.attribute_map = {
            'id': 'id',
            'resource_id': 'resource-id',
            'start_time': 'start-time',
            'end_time': 'end-time',
            'updated_time': 'updated-time',
            'continuous_operating_limit': 'continuous-operating-limit',
            'emergency_operating_limits': 'emergency-operating-limits',
            'reason': 'reason'
        }

        self._id = id
        self._resource_id = resource_id
        self._start_time = start_time
        self._end_time = end_time
        self._updated_time = updated_time
        self._continuous_operating_limit = continuous_operating_limit
        self._emergency_operating_limits = emergency_operating_limits
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt) -> 'TemporaryRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The temporary-rating of this TemporaryRating.  # noqa: E501
        :rtype: TemporaryRating
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this TemporaryRating.

         Contains a unique identifier for an object.    # noqa: E501

        :return: The id of this TemporaryRating.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this TemporaryRating.

         Contains a unique identifier for an object.    # noqa: E501

        :param id: The id of this TemporaryRating.
        :type id: str
        """
        if id is not None and len(id) > 250:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `250`")  # noqa: E501
        if id is not None and not re.search(r'^(.){0,250}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^(.){0,250}$/`")  # noqa: E501

        self._id = id

    @property
    def resource_id(self) -> str:
        """Gets the resource_id of this TemporaryRating.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :return: The resource_id of this TemporaryRating.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: str):
        """Sets the resource_id of this TemporaryRating.

         Contains a unique identifier for an a power system resources, such as a transmission facility, segment, interface, etc.    # noqa: E501

        :param resource_id: The resource_id of this TemporaryRating.
        :type resource_id: str
        """
        if resource_id is not None and len(resource_id) > 250:
            raise ValueError("Invalid value for `resource_id`, length must be less than or equal to `250`")  # noqa: E501
        if resource_id is not None and not re.search(r'^(.){0,250}$', resource_id):  # noqa: E501
            raise ValueError("Invalid value for `resource_id`, must be a follow pattern or equal to `/^(.){0,250}$/`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this TemporaryRating.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :return: The start_time of this TemporaryRating.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this TemporaryRating.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :param start_time: The start_time of this TemporaryRating.
        :type start_time: datetime
        """
        if start_time is not None and len(start_time) > 25:
            raise ValueError("Invalid value for `start_time`, length must be less than or equal to `25`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this TemporaryRating.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :return: The end_time of this TemporaryRating.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this TemporaryRating.

         RFC 3339 date-time string with *no fractional seconds component* that designates a start or end to an operating period (such as an hour) that starts at a specified time. This will frequently be at the start of an hour, but may be finer-grained, such as every 30 minutes, should the Clearinghouse Provider choose.  If the Transmission Provider is operating in EST, these are valid and equivalent values:  * 2023-01-01T06:00Z * 2023-01-01T01:00-5:00 * 2023-01-01T00:00-6:00 * 2023-01-01T11:30+5:30  The server should uniformly represent date-times in the operational time zone of the Clearinghouse Provider.   # noqa: E501

        :param end_time: The end_time of this TemporaryRating.
        :type end_time: datetime
        """
        if end_time is not None and len(end_time) > 25:
            raise ValueError("Invalid value for `end_time`, length must be less than or equal to `25`")  # noqa: E501

        self._end_time = end_time

    @property
    def updated_time(self) -> datetime:
        """Gets the updated_time of this TemporaryRating.

        RFC 3339 date-time string with a maximum of 10 digits in the fractional seconds component, i.e., nanosecond precision.  # noqa: E501

        :return: The updated_time of this TemporaryRating.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time: datetime):
        """Sets the updated_time of this TemporaryRating.

        RFC 3339 date-time string with a maximum of 10 digits in the fractional seconds component, i.e., nanosecond precision.  # noqa: E501

        :param updated_time: The updated_time of this TemporaryRating.
        :type updated_time: datetime
        """
        if updated_time is not None and len(updated_time) > 35:
            raise ValueError("Invalid value for `updated_time`, length must be less than or equal to `35`")  # noqa: E501

        self._updated_time = updated_time

    @property
    def continuous_operating_limit(self) -> Limit:
        """Gets the continuous_operating_limit of this TemporaryRating.


        :return: The continuous_operating_limit of this TemporaryRating.
        :rtype: Limit
        """
        return self._continuous_operating_limit

    @continuous_operating_limit.setter
    def continuous_operating_limit(self, continuous_operating_limit: Limit):
        """Sets the continuous_operating_limit of this TemporaryRating.


        :param continuous_operating_limit: The continuous_operating_limit of this TemporaryRating.
        :type continuous_operating_limit: Limit
        """

        self._continuous_operating_limit = continuous_operating_limit

    @property
    def emergency_operating_limits(self) -> List[LimitValueSetInner]:
        """Gets the emergency_operating_limits of this TemporaryRating.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :return: The emergency_operating_limits of this TemporaryRating.
        :rtype: List[LimitValueSetInner]
        """
        return self._emergency_operating_limits

    @emergency_operating_limits.setter
    def emergency_operating_limits(self, emergency_operating_limits: List[LimitValueSetInner]):
        """Sets the emergency_operating_limits of this TemporaryRating.

         A set of general limit or rating values, each mapped to the various limit bands defined by the Transmission Provider's operating manual. This typically consists of a \"normal\" limit, as well as limits for various levels of emergency conditions (typically 2-4) defined in the operations manual.   # noqa: E501

        :param emergency_operating_limits: The emergency_operating_limits of this TemporaryRating.
        :type emergency_operating_limits: List[LimitValueSetInner]
        """
        if emergency_operating_limits is not None and len(emergency_operating_limits) > 10:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be less than or equal to `10`")  # noqa: E501
        if emergency_operating_limits is not None and len(emergency_operating_limits) < 1:
            raise ValueError("Invalid value for `emergency_operating_limits`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._emergency_operating_limits = emergency_operating_limits

    @property
    def reason(self) -> str:
        """Gets the reason of this TemporaryRating.

        Free-form text indicating the reason for the temporary rating.   # noqa: E501

        :return: The reason of this TemporaryRating.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this TemporaryRating.

        Free-form text indicating the reason for the temporary rating.   # noqa: E501

        :param reason: The reason of this TemporaryRating.
        :type reason: str
        """
        if reason is not None and len(reason) > 100:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `100`")  # noqa: E501

        self._reason = reason
