from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UndervoltageThresholdPu(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, voltage_pu_min=None, base_k_v=None):  # noqa: E501
        """UndervoltageThresholdPu - a model defined in OpenAPI

        :param voltage_pu_min: The voltage_pu_min of this UndervoltageThresholdPu.  # noqa: E501
        :type voltage_pu_min: float
        :param base_k_v: The base_k_v of this UndervoltageThresholdPu.  # noqa: E501
        :type base_k_v: float
        """
        self.openapi_types = {
            'voltage_pu_min': float,
            'base_k_v': float
        }

        self.attribute_map = {
            'voltage_pu_min': 'voltage-pu-min',
            'base_k_v': 'base-kV'
        }

        self._voltage_pu_min = voltage_pu_min
        self._base_k_v = base_k_v

    @classmethod
    def from_dict(cls, dikt) -> 'UndervoltageThresholdPu':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The undervoltage-threshold-pu of this UndervoltageThresholdPu.  # noqa: E501
        :rtype: UndervoltageThresholdPu
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voltage_pu_min(self) -> float:
        """Gets the voltage_pu_min of this UndervoltageThresholdPu.


        :return: The voltage_pu_min of this UndervoltageThresholdPu.
        :rtype: float
        """
        return self._voltage_pu_min

    @voltage_pu_min.setter
    def voltage_pu_min(self, voltage_pu_min: float):
        """Sets the voltage_pu_min of this UndervoltageThresholdPu.


        :param voltage_pu_min: The voltage_pu_min of this UndervoltageThresholdPu.
        :type voltage_pu_min: float
        """
        if voltage_pu_min is None:
            raise ValueError("Invalid value for `voltage_pu_min`, must not be `None`")  # noqa: E501
        if voltage_pu_min is not None and voltage_pu_min > 2:  # noqa: E501
            raise ValueError("Invalid value for `voltage_pu_min`, must be a value less than or equal to `2`")  # noqa: E501
        if voltage_pu_min is not None and voltage_pu_min < 0:  # noqa: E501
            raise ValueError("Invalid value for `voltage_pu_min`, must be a value greater than or equal to `0`")  # noqa: E501

        self._voltage_pu_min = voltage_pu_min

    @property
    def base_k_v(self) -> float:
        """Gets the base_k_v of this UndervoltageThresholdPu.


        :return: The base_k_v of this UndervoltageThresholdPu.
        :rtype: float
        """
        return self._base_k_v

    @base_k_v.setter
    def base_k_v(self, base_k_v: float):
        """Sets the base_k_v of this UndervoltageThresholdPu.


        :param base_k_v: The base_k_v of this UndervoltageThresholdPu.
        :type base_k_v: float
        """
        if base_k_v is not None and base_k_v > 1100:  # noqa: E501
            raise ValueError("Invalid value for `base_k_v`, must be a value less than or equal to `1100`")  # noqa: E501
        if base_k_v is not None and base_k_v < 0:  # noqa: E501
            raise ValueError("Invalid value for `base_k_v`, must be a value greater than or equal to `0`")  # noqa: E501

        self._base_k_v = base_k_v
